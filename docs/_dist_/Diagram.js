import './Diagram.css.proxy.js';
/* src/Diagram.svelte generated by Svelte v3.22.3 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_block,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	svg_element,
	text,
	update_keyed_each
} from "/web_modules/svelte/internal.js";

import { getColor } from "./colors.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[12] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[12] = i;
	return child_ctx;
}

// (3:6) {#each items as item, i (item.id)}
function create_each_block_2(key_1, ctx) {
	let li;
	let t0;
	let t1_value = /*i*/ ctx[12] + 1 + "";
	let t1;
	let t2;
	let t3_value = /*item*/ ctx[10].width + "";
	let t3;
	let t4;
	let t5_value = /*item*/ ctx[10].height + "";
	let t5;
	let t6;
	let t7_value = /*item*/ ctx[10].x + "";
	let t7;
	let t8;
	let t9_value = /*item*/ ctx[10].y + "";
	let t9;

	return {
		key: key_1,
		first: null,
		c() {
			li = element("li");
			t0 = text("Fabric piece #");
			t1 = text(t1_value);
			t2 = text(": ");
			t3 = text(t3_value);
			t4 = text(" wide by ");
			t5 = text(t5_value);
			t6 = text(" long, at position ");
			t7 = text(t7_value);
			t8 = text(", ");
			t9 = text(t9_value);
			this.first = li;
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t0);
			append(li, t1);
			append(li, t2);
			append(li, t3);
			append(li, t4);
			append(li, t5);
			append(li, t6);
			append(li, t7);
			append(li, t8);
			append(li, t9);
		},
		p(ctx, dirty) {
			if (dirty & /*items*/ 1 && t1_value !== (t1_value = /*i*/ ctx[12] + 1 + "")) set_data(t1, t1_value);
			if (dirty & /*items*/ 1 && t3_value !== (t3_value = /*item*/ ctx[10].width + "")) set_data(t3, t3_value);
			if (dirty & /*items*/ 1 && t5_value !== (t5_value = /*item*/ ctx[10].height + "")) set_data(t5, t5_value);
			if (dirty & /*items*/ 1 && t7_value !== (t7_value = /*item*/ ctx[10].x + "")) set_data(t7, t7_value);
			if (dirty & /*items*/ 1 && t9_value !== (t9_value = /*item*/ ctx[10].y + "")) set_data(t9, t9_value);
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (21:10) {#each items as item, i (item.id)}
function create_each_block_1(key_1, ctx) {
	let rect;
	let rect_x_value;
	let rect_y_value;
	let rect_width_value;
	let rect_height_value;
	let rect_fill_value;

	return {
		key: key_1,
		first: null,
		c() {
			rect = svg_element("rect");
			attr(rect, "x", rect_x_value = /*item*/ ctx[10].x);
			attr(rect, "y", rect_y_value = /*item*/ ctx[10].y);
			attr(rect, "width", rect_width_value = /*item*/ ctx[10].width);
			attr(rect, "height", rect_height_value = /*item*/ ctx[10].height);
			attr(rect, "fill", rect_fill_value = getColor(/*item*/ ctx[10].id));
			this.first = rect;
		},
		m(target, anchor) {
			insert(target, rect, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*items*/ 1 && rect_x_value !== (rect_x_value = /*item*/ ctx[10].x)) {
				attr(rect, "x", rect_x_value);
			}

			if (dirty & /*items*/ 1 && rect_y_value !== (rect_y_value = /*item*/ ctx[10].y)) {
				attr(rect, "y", rect_y_value);
			}

			if (dirty & /*items*/ 1 && rect_width_value !== (rect_width_value = /*item*/ ctx[10].width)) {
				attr(rect, "width", rect_width_value);
			}

			if (dirty & /*items*/ 1 && rect_height_value !== (rect_height_value = /*item*/ ctx[10].height)) {
				attr(rect, "height", rect_height_value);
			}

			if (dirty & /*items*/ 1 && rect_fill_value !== (rect_fill_value = getColor(/*item*/ ctx[10].id))) {
				attr(rect, "fill", rect_fill_value);
			}
		},
		d(detaching) {
			if (detaching) detach(rect);
		}
	};
}

// (31:8) {#if showGridlines}
function create_if_block(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let each_value = /*dashes*/ ctx[4];
	const get_key = ctx => [/*dash*/ ctx[7].x1, /*dash*/ ctx[7].y1, /*dash*/ ctx[7].x2, /*dash*/ ctx[7].y2].join(",");

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*dashes*/ 16) {
				const each_value = /*dashes*/ ctx[4];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, destroy_block, create_each_block, each_1_anchor, get_each_context);
			}
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (32:10) {#each dashes as dash ([dash.x1, dash.y1, dash.x2, dash.y2].join(','))}
function create_each_block(key_1, ctx) {
	let line;
	let line_x__value;
	let line_y__value;
	let line_x__value_1;
	let line_y__value_1;

	return {
		key: key_1,
		first: null,
		c() {
			line = svg_element("line");
			attr(line, "x1", line_x__value = /*dash*/ ctx[7].x1);
			attr(line, "y1", line_y__value = /*dash*/ ctx[7].y1);
			attr(line, "x2", line_x__value_1 = /*dash*/ ctx[7].x2);
			attr(line, "y2", line_y__value_1 = /*dash*/ ctx[7].y2);
			attr(line, "class", "border svelte-1q5u4ch");
			attr(line, "stroke-dasharray", "1");
			this.first = line;
		},
		m(target, anchor) {
			insert(target, line, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*dashes*/ 16 && line_x__value !== (line_x__value = /*dash*/ ctx[7].x1)) {
				attr(line, "x1", line_x__value);
			}

			if (dirty & /*dashes*/ 16 && line_y__value !== (line_y__value = /*dash*/ ctx[7].y1)) {
				attr(line, "y1", line_y__value);
			}

			if (dirty & /*dashes*/ 16 && line_x__value_1 !== (line_x__value_1 = /*dash*/ ctx[7].x2)) {
				attr(line, "x2", line_x__value_1);
			}

			if (dirty & /*dashes*/ 16 && line_y__value_1 !== (line_y__value_1 = /*dash*/ ctx[7].y2)) {
				attr(line, "y2", line_y__value_1);
			}
		},
		d(detaching) {
			if (detaching) detach(line);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let ul;
	let each_blocks_1 = [];
	let each0_lookup = new Map();
	let t0;
	let div6;
	let div0;
	let t1;
	let div1;
	let t2;
	let t3;
	let t4;
	let div2;
	let t5;
	let div3;
	let t6;
	let t7;
	let t8;
	let div4;
	let svg;
	let each_blocks = [];
	let each1_lookup = new Map();
	let each1_anchor;
	let rect;
	let svg_viewBox_value;
	let t9;
	let div5;
	let t11;
	let div8;
	let div7;
	let label;
	let input;
	let t12;
	let span;
	let section_aria_label_value;
	let dispose;
	let each_value_2 = /*items*/ ctx[0];
	const get_key = ctx => /*item*/ ctx[10].id;

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2(ctx, each_value_2, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_1[i] = create_each_block_2(key, child_ctx));
	}

	let each_value_1 = /*items*/ ctx[0];
	const get_key_1 = ctx => /*item*/ ctx[10].id;

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key_1(child_ctx);
		each1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
	}

	let if_block = /*showGridlines*/ ctx[3] && create_if_block(ctx);

	return {
		c() {
			section = element("section");
			ul = element("ul");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t0 = space();
			div6 = element("div");
			div0 = element("div");
			t1 = space();
			div1 = element("div");
			t2 = text(/*width*/ ctx[2]);
			t3 = text("\"");
			t4 = space();
			div2 = element("div");
			t5 = space();
			div3 = element("div");
			t6 = text(/*height*/ ctx[1]);
			t7 = text("\" (selvage)");
			t8 = space();
			div4 = element("div");
			svg = svg_element("svg");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each1_anchor = empty();
			if (if_block) if_block.c();
			rect = svg_element("rect");
			t9 = space();
			div5 = element("div");
			div5.textContent = "(selvage)";
			t11 = space();
			div8 = element("div");
			div7 = element("div");
			label = element("label");
			input = element("input");
			t12 = space();
			span = element("span");
			span.textContent = "Show gridlines";
			attr(ul, "class", "sr-only");
			attr(ul, "aria-label", "Fabric pieces drawn in the diagram");
			attr(div1, "class", "x-label");
			attr(div3, "class", "y-label svelte-1q5u4ch");
			attr(rect, "class", "border svelte-1q5u4ch");
			attr(rect, "x", "0");
			attr(rect, "y", "0");
			attr(rect, "width", /*width*/ ctx[2]);
			attr(rect, "height", /*height*/ ctx[1]);
			attr(rect, "fill-opacity", "0");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", svg_viewBox_value = "0 0 " + /*width*/ ctx[2] + " " + /*height*/ ctx[1]);
			attr(svg, "class", "svelte-1q5u4ch");
			attr(div5, "class", "y-label-right svelte-1q5u4ch");
			attr(div6, "class", "grid svelte-1q5u4ch");
			attr(div6, "aria-hidden", "true");
			attr(input, "type", "checkbox");
			attr(div7, "class", "pad-v-10");
			attr(section, "aria-label", section_aria_label_value = "Diagram " + /*width*/ ctx[2] + " wide by " + /*height*/ ctx[1] + " long");
		},
		m(target, anchor, remount) {
			insert(target, section, anchor);
			append(section, ul);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(ul, null);
			}

			append(section, t0);
			append(section, div6);
			append(div6, div0);
			append(div6, t1);
			append(div6, div1);
			append(div1, t2);
			append(div1, t3);
			append(div6, t4);
			append(div6, div2);
			append(div6, t5);
			append(div6, div3);
			append(div3, t6);
			append(div3, t7);
			append(div6, t8);
			append(div6, div4);
			append(div4, svg);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(svg, null);
			}

			append(svg, each1_anchor);
			if (if_block) if_block.m(svg, null);
			append(svg, rect);
			append(div6, t9);
			append(div6, div5);
			append(section, t11);
			append(section, div8);
			append(div8, div7);
			append(div7, label);
			append(label, input);
			input.checked = /*showGridlines*/ ctx[3];
			append(label, t12);
			append(label, span);
			if (remount) dispose();
			dispose = listen(input, "change", /*input_change_handler*/ ctx[6]);
		},
		p(ctx, [dirty]) {
			if (dirty & /*items*/ 1) {
				const each_value_2 = /*items*/ ctx[0];
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_2, each0_lookup, ul, destroy_block, create_each_block_2, null, get_each_context_2);
			}

			if (dirty & /*width*/ 4) set_data(t2, /*width*/ ctx[2]);
			if (dirty & /*height*/ 2) set_data(t6, /*height*/ ctx[1]);

			if (dirty & /*items, getColor*/ 1) {
				const each_value_1 = /*items*/ ctx[0];
				each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, each_value_1, each1_lookup, svg, destroy_block, create_each_block_1, each1_anchor, get_each_context_1);
			}

			if (/*showGridlines*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(svg, rect);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*width*/ 4) {
				attr(rect, "width", /*width*/ ctx[2]);
			}

			if (dirty & /*height*/ 2) {
				attr(rect, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*width, height*/ 6 && svg_viewBox_value !== (svg_viewBox_value = "0 0 " + /*width*/ ctx[2] + " " + /*height*/ ctx[1])) {
				attr(svg, "viewBox", svg_viewBox_value);
			}

			if (dirty & /*showGridlines*/ 8) {
				input.checked = /*showGridlines*/ ctx[3];
			}

			if (dirty & /*width, height*/ 6 && section_aria_label_value !== (section_aria_label_value = "Diagram " + /*width*/ ctx[2] + " wide by " + /*height*/ ctx[1] + " long")) {
				attr(section, "aria-label", section_aria_label_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (if_block) if_block.d();
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let showGridlines = true;
	let dashes = [];
	let { increment } = $$props;
	let { items } = $$props;
	let { height } = $$props;
	let { width } = $$props;

	function input_change_handler() {
		showGridlines = this.checked;
		$$invalidate(3, showGridlines);
	}

	$$self.$set = $$props => {
		if ("increment" in $$props) $$invalidate(5, increment = $$props.increment);
		if ("items" in $$props) $$invalidate(0, items = $$props.items);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("width" in $$props) $$invalidate(2, width = $$props.width);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*increment, width, height*/ 38) {
			$: {
				function generateDashes() {
					const newDashes = [];

					for (let i = increment; i < width; i += increment) {
						newDashes.push({ x1: i, y1: 0, x2: i, y2: height });
					}

					for (let i = increment; i < height; i += increment) {
						newDashes.push({ x1: 0, y1: i, x2: width, y2: i });
					}

					$$invalidate(4, dashes = newDashes);
				}

				generateDashes();
			}
		}
	};

	return [items, height, width, showGridlines, dashes, increment, input_change_handler];
}

class Diagram extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			increment: 5,
			items: 0,
			height: 1,
			width: 2
		});
	}
}

export default Diagram;